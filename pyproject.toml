[build-system]
requires = ["setuptools>=45", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "winternlc"
version = "1.3.1"
description = ""
authors = [
    {name = "Danielle Frostig", email = "frostig@mit.edu"},
    {name = "Robert Stein", email = "rdstein@caltech.edu"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    "Programming Language :: Python :: 3.12",
    'Programming Language :: Python :: 3.13',
    'Intended Audience :: Science/Research',
    'Intended Audience :: End Users/Desktop',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Astronomy',
    'Topic :: Scientific/Engineering :: Physics',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]
dependencies = [
    'numpy',
    'matplotlib',
    'astropy',
    'scipy',
    "pre-commit"
]
[project.optional-dependencies]
dev = [
    "black == 24.4.2",
    "isort == 5.13.2",
    "pylint == 3.2.2",
    "coveralls",
]

[project.urls]
Homepage = "https://github.com/winter-telescope/winternlc"

[project.scripts]
winternlc-apply = "winternlc.apply:nlc_cli"
winternlc-check = "winternlc.get_corrections:check_for_files"

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
include = ["winternlc*"]

[tool.coverage.run]
source = ["winternlc"]
omit = ["winternlc/create/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true

[tool.isort]
profile = "black"

[tool.pylint.format]
max-line-length = "88"
disable=["logging-fstring-interpolation"]
good-names=["ax", "ra", "df", "pi", "i"]
exclude-too-few-public-methods=["pydantic.*"]
extension-pkg-whitelist=["pydantic"]
